@inject IDialogService DialogService
@using LionkApp.Components.Widgets.Dialogs
@using Lionk.Notification
@using System.Collections.ObjectModel

<MudPaper Elevation="2" Class="pa-4 mb-10">
    <div style="display: flex; justify-content: space-between;">
        <MudText Typo="Typo.h6">Notifiers</MudText>
        <div style="width:25%">
            <MudTextField @bind-Value="SearchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" />
        </div>
    </div>
    <MudList T="string" Class="mt-4">
        @foreach (var notifier in FilteredNotifiers)
        {
            <MudListItem>
                <div style="display: flex; justify-content: space-between; width: 100%; height: 30px;">
                    <MudText>@notifier.Name</MudText>
                    <div style="display: flex;">
                        <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" @onclick="() => OnEditClicked(notifier.Id)" />
                        <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" @onclick="() => OnDeleteClicked(notifier.Id)" />
                    </div>
                </div>
            </MudListItem>
        }
    </MudList>
</MudPaper>

@code {
    private string SearchString = "";

    private IEnumerable<INotifier> FilteredNotifiers => FilterNotifiers(SearchString);

    private IEnumerable<INotifier> FilterNotifiers(string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return NotificationService.Notifiers;

        return NotificationService.Notifiers.Where(n => n.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase));
    }

    private Task OnEditClicked(Guid notifierId)
    {
        var dialogParameters = new DialogParameters { { "NotifierGuid", notifierId } };

        var options = new DialogOptions { CloseOnEscapeKey = true };

        return DialogService.ShowAsync<NotifierEditor>("Edit notifier", dialogParameters, options);
    }

    private async Task OnDeleteClicked(Guid notifierId)
    {
        bool? result = await DialogService.ShowMessageBox(
            "Confirm Delete",
            "Are you sure you want to delete this notifier?",
            yesText: "Yes", cancelText: "No");

        if (result == true)
        {
            var notifier = NotificationService.Notifiers.FirstOrDefault(n => n.Id == notifierId);
            if (notifier != null)
            {
                NotificationService.RemoveNotifier(notifier);
                await InvokeAsync(StateHasChanged);
            }
        }
    }
}
