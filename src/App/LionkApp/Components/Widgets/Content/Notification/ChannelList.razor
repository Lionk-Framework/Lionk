@inject IDialogService DialogService
@using LionkApp.Components.Widgets.Dialogs
@using Lionk.Notification
@using System.Collections.ObjectModel

<MudPaper Elevation="2" Class="pa-4 mb-10">
    <div style="display: flex; justify-content: space-between;">
        <MudText Typo="Typo.h6">Channels</MudText>
        <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" Color="Color.Primary" @onclick="OnAddClicked">ADD</MudButton>
    </div>
    <MudList T="string" Class="mt-4">
        @foreach (var channel in NotificationService.Channels)
        {
            <MudListItem>
                <div style="display: flex; justify-content: space-between; width: 100%; height: 30px;">
                    <MudText>@channel.Name</MudText>
                    <div style="display: flex;">
                        <MudIconButton Icon="@Icons.Material.Filled.Settings" Color="Color.Primary" @onclick="OnConfigureClicked" />
                        <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" @onclick="() => OnDeleteClicked(channel.Guid)" />
                    </div>
                </div>
            </MudListItem>
        }
    </MudList>
</MudPaper>

@code {
    private Task OnAddClicked()
    {
        // TODO - Get available channels when ready
        var dialogParameters = new DialogParameters { { "Channels", NotificationService.Channels } };

        var options = new DialogOptions { CloseOnEscapeKey = true };

        return DialogService.ShowAsync<ChannelAdder>("Add channel", dialogParameters, options);
    }

    private void OnConfigureClicked()
    {
        // TODO - Retrieve the configurable view from dll
    }

    private async Task OnDeleteClicked(Guid channelGuid)
    {
        bool? result = await DialogService.ShowMessageBox(
            "Confirm Delete",
            "Are you sure you want to delete this channel?",
            yesText: "Yes", cancelText: "No");

        if (result == true)
        {
            var channel = NotificationService.Channels.FirstOrDefault(c => c.Guid == channelGuid);
            if (channel != null)
            {
                NotificationService.RemoveChannel(channel);
                await InvokeAsync(StateHasChanged);
            }
        }
    }
}
