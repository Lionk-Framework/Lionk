@using Lionk.Auth.Identity
@using Lionk.Notification
@using Microsoft.AspNetCore.Components.Authorization
@inherits LayoutComponentBase
@inject NavigationManager NavManager
@inject NotificationStateService NotificationState
@inject UserAuthenticationStateProvider AuthStateProvider
@inject LionkPalette Theme

<AuthorizeView>
    <MudThemeProvider Theme="@_theme" IsDarkMode="_isDarkMode" />
    <MudPopoverProvider />
    <MudDialogProvider />
    <MudSnackbarProvider />
    <MudLayout>

        <MudAppBar Elevation="1">
            <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((MouseEventArgs e) => DrawerToggle())" />
            <MudText Typo="Typo.h5" Class="ml-3">Lionk</MudText>
            <MudSpacer />
            <MudBadge Origin=Origin.CenterLeft Content="@NotificationState.BadgeCounter" Color="Color.Primary">
                <MudIconButton Icon="@Icons.Material.Filled.CircleNotifications" Color="Color.Primary" OnClick="OnNotificationPressed" />
            </MudBadge>
            <MudIconButton Icon="@(DarkLightModeButtonIcon)" Color="Color.Inherit" OnClick="@DarkModeToggle" />
        </MudAppBar>
        <MudDrawer @bind-Open="_isDrawerOpen" ClipMode="DrawerClipMode.Always" Elevation="2">

            <MudNavMenu>

                <MudNavLink Href="" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Home">Dashboard</MudNavLink>
                <MudNavGroup Title="Notifications" Icon="@Icons.Material.Filled.Notifications" @bind-Expanded="_isNotifcationExpanded">
                    <MudNavLink Href="/active" Match="NavLinkMatch.Prefix">Active</MudNavLink>
                    <MudNavLink Href="/history" Match="NavLinkMatch.Prefix">History</MudNavLink>
                    <MudNavLink Href="/configuration" Match="NavLinkMatch.Prefix">Configuration</MudNavLink>
                </MudNavGroup>
                <AuthorizeView Context="pluginContext" Roles="Admin">
                    <MudNavLink Href="/plugins" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.AddBox">Plugins</MudNavLink>
                </AuthorizeView>
                <AuthorizeView Context="componentContext" Roles="Admin">
                    <MudNavLink Href="/components" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.DeviceHub">Components</MudNavLink>
                </AuthorizeView>
                <AuthorizeView Context="componentContext" Roles="Admin">
                    <MudNavLink Href="/cyclic" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.Cyclone">Cyclic</MudNavLink>
                </AuthorizeView>

            </MudNavMenu>


            <MudContainer Class="mt-auto pa-2">
                <MudGrid Justify="Justify.SpaceBetween">
                    <MudItem>
                        <MudIconButton Icon="@Icons.Material.Filled.AccountCircle" Color="Color.Primary" OnClick="OnProfilePressed" />
                        <MudText Typo="Typo.body2">Profile</MudText>
                        <MudText Typo="Typo.body2">@UserName</MudText>
                    </MudItem>
                    <MudItem>
                        <MudIconButton Icon="@Icons.Material.Filled.Logout" Color="Color.Primary" OnClick="OnLogoutPressed" />
                    </MudItem>
                </MudGrid>
            </MudContainer>
        </MudDrawer>

        <MudMainContent Class="mt-16 pa-4">
            @Body
        </MudMainContent>
    </MudLayout>
</AuthorizeView>

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

@code {
    private bool _isDrawerOpen = true;

    private bool _isNotifcationExpanded;

    private MudTheme? _theme;

    private bool _isDarkMode = true;

    /// <summary>
    /// The current username.
    /// </summary>
    public string UserName = string.Empty;

    /// <inheritdoc />
    protected override void OnInitialized()
    {
        base.OnInitialized();
        UserName = AuthStateProvider.CurrentUser?.Username ?? "Not Logged In";
        _theme = new MudTheme { PaletteLight = Theme.LightPalette, PaletteDark = Theme.DarkPalette, LayoutProperties = new LayoutProperties() };
        NotificationState.BadgeCounter = NotificationService.GetUnreadNotificationCount();
        NotificationState.OnNotificationReceived += IncrementBadgeCounter;
        NotificationState.OnBadgeCounterChanged += OnBadgeCounterChanged;
    }

    public void Dispose()
    {
        NotificationState.OnNotificationReceived -= IncrementBadgeCounter;
        NotificationState.OnBadgeCounterChanged -= OnBadgeCounterChanged;
    }

    private void DarkModeToggle()
    {
        _isDarkMode = !_isDarkMode;
    }

    private void DrawerToggle()
    {
        _isDrawerOpen = !_isDrawerOpen;
    }

    private void OnNotificationPressed()
    {
        NavManager.NavigateTo("/active");
        _isNotifcationExpanded = true;
    }

    private void OnProfilePressed()
    {
        NavManager.NavigateTo("/profile");
    }

    private async Task OnLogoutPressed()
    {
        await AuthStateProvider.LogoutAsync();
        NavManager.NavigateTo("/auth");
    }

    private void IncrementBadgeCounter()
    {
        NotificationState.IncrementBadgeCounter();
        InvokeAsync(StateHasChanged);
    }

    private void OnBadgeCounterChanged()
    {
        InvokeAsync(StateHasChanged);
    }

    /// <summary>
    /// Switches the dark mode.
    /// </summary>
    public string DarkLightModeButtonIcon =>
        _isDarkMode switch
        {
            true => Icons.Material.Rounded.LightMode,
            false => Icons.Material.Outlined.DarkMode,
        };
}