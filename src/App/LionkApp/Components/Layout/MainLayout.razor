@inherits LayoutComponentBase
@inject NavigationManager NavManager

<MudThemeProvider Theme="@Theme" IsDarkMode="IsDarkMode" />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />
<MudLayout>
    <MudAppBar Elevation="1">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="() => IsDrawerOpen = !IsDrawerOpen" />
        <MudText Typo="Typo.h5" Class="ml-3">Lionk</MudText>
        <MudSpacer />
        <MudIconButton Icon="@Icons.Material.Filled.CircleNotifications" Color="Color.Primary" OnClick="OnNotificationPressed" />
        @*<MudIconButton Icon="@(DarkLightModeButtonIcon)" Color="Color.Inherit" OnClick="() => IsDarkMode = !IsDarkMode" />*@
    </MudAppBar>
    <MudDrawer @bind-Open="IsDrawerOpen" ClipMode="DrawerClipMode.Always" Elevation="2">
        <MudNavMenu>
            <AuthorizeView>
                <Authorized>
                    <MudNavLink Href="" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Home">Dashboard</MudNavLink>
                    <MudNavGroup Title="Notifications" Icon="@Icons.Material.Filled.Notifications" @bind-Expanded="IsNotifcationExpanded">
                        <MudNavLink Href="active" Match="NavLinkMatch.Prefix">Active</MudNavLink>
                        <MudNavLink Href="history" Match="NavLinkMatch.Prefix">History</MudNavLink>
                        <MudNavLink Href="configuration" Match="NavLinkMatch.Prefix">Configuration</MudNavLink>
                    </MudNavGroup>
                    <MudNavLink Href="plugins" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.AddBox">Plugins</MudNavLink>
                </Authorized>
                <NotAuthorized>
                    <MudNavLink Href="Account/Register" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.FormatAlignLeft">Register</MudNavLink>
                    <MudNavLink Href="Account/Login" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.Login">Login</MudNavLink>
                </NotAuthorized>
            </AuthorizeView>
        </MudNavMenu>
        <MudContainer Class="mt-auto pa-2">
            <MudGrid Justify="Justify.SpaceBetween">
                <AuthorizeView>
                    <Authorized>
                        <div class="nav-item px-3">
                            <NavLink class="nav-link" href="Account/Manage">
                                <span class="bi bi-person-fill" aria-hidden="true"></span> Profile
                            </NavLink>
                        </div>
                        <div class="nav-item px-3">
                            <form action="Account/Logout" method="post">
                                <AntiforgeryToken />
                                <input type="hidden" name="ReturnUrl" value="Account/Login" />
                                <button type="submit" class="nav-link">
                                    <span class="bi bi-box-arrow-right" aria-hidden="true"></span> Logout
                                </button>
                            </form>
                        </div>
                    </Authorized>
                </AuthorizeView>
            </MudGrid>
        </MudContainer>
    </MudDrawer>
    <MudMainContent Class="mt-16 pa-4">
        @Body
    </MudMainContent>
</MudLayout>

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

@code {
    private bool IsDrawerOpen = true;
    private bool IsNotifcationExpanded = false;
    private MudTheme? Theme = null;
    private bool IsDarkMode = false;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        Theme = new()
            {
                PaletteLight = _lightPalette,
                PaletteDark = _darkPalette,
                LayoutProperties = new LayoutProperties()
            };
    }

    private readonly PaletteLight _lightPalette = new()
        {
            Black = "#110e2d",
            AppbarText = "#424242",
            AppbarBackground = "rgba(255,255,255,0.8)",
            DrawerBackground = "#ffffff",
            GrayLight = "#e8e8e8",
            GrayLighter = "#f9f9f9",
        };

    private readonly PaletteDark _darkPalette = new()
        {
            Primary = "#7e6fff",
            Surface = "#1e1e2d",
            Background = "#1a1a27",
            BackgroundGray = "#151521",
            AppbarText = "#92929f",
            AppbarBackground = "rgba(26,26,39,0.8)",
            DrawerBackground = "#1a1a27",
            ActionDefault = "#74718e",
            ActionDisabled = "#9999994d",
            ActionDisabledBackground = "#605f6d4d",
            TextPrimary = "#b2b0bf",
            TextSecondary = "#92929f",
            TextDisabled = "#ffffff33",
            DrawerIcon = "#92929f",
            DrawerText = "#92929f",
            GrayLight = "#2a2833",
            GrayLighter = "#1e1e2d",
            Info = "#4a86ff",
            Success = "#3dcb6c",
            Warning = "#ffb545",
            Error = "#ff3f5f",
            LinesDefault = "#33323e",
            TableLines = "#33323e",
            Divider = "#292838",
            OverlayLight = "#1e1e2d80",
        };

    public string DarkLightModeButtonIcon => IsDarkMode switch
    {
        true => Icons.Material.Rounded.LightMode,
        false => Icons.Material.Outlined.DarkMode,
    };

    private void OnNotificationPressed()
    {
        NavManager.NavigateTo("/active");
        IsNotifcationExpanded = true;
    }
}
